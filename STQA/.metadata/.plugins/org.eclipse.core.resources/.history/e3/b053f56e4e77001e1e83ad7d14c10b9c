package stqa;
import static org.junit.Assert.assertEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class BankingApplicationTest {

    private Customer customer;

    @BeforeEach
    public void setUp() {
        customer = new Customer("Test User", 12345, 1000.0);
    }

    @Test
    public void testDeposit() {
        // Call the deposit method to perform the action
        customer.deposit(500.0);
        
        // Then use assertEquals to compare the actual balance with the expected balance
        assertEquals(1500.0, customer.displayBalance(), 0.001);
    }

    @Test
    public void testWithdraw() {
        // Call the withdraw method to perform the action
        customer.withdraw(500.0);

        // Then use assertEquals to compare the actual balance with the expected balance
        assertEquals(500.0, customer.displayBalance(), 0.001);
    }

    @Test
    public void testWithdrawInsufficientFunds() {
        customer.withdraw(1500.0); // Attempt to withdraw more than the balance
        assertEquals(1000.0, customer.displayBalance(), 0.001);
    }

    @Test
    public void testNegativeDeposit() {
        customer.deposit(-100.0); // Attempt to deposit a negative amount
        assertEquals(1000.0, customer.displayBalance(), 0.001);
    }

    @Test
    public void testNegativeWithdrawal() {
        customer.withdraw(-100.0); // Attempt to withdraw a negative amount
        assertEquals(1000.0, customer.displayBalance(), 0.001);
    }

    @Test
    public void testInvalidWithdrawalAmount() {
        customer.withdraw(2000.0); // Attempt to withdraw more than the balance
        assertEquals(1000.0, customer.displayBalance(), 0.001);
    }

    @Test
    public void testUserAccountNumber() {
        assertEquals(12345, customer.getAccountNumber());
    }

    @Test
    public void testUserName() {
        assertEquals("Test User", customer.getName());
    }

    @Test
    public void testInvalidUserName() {
        Customer invalidCustomer = new Customer("", 54321, 2000.0); // Empty name
        assertTrue(invalidCustomer.getName().isEmpty());
    }

    @Test
    public void testNegativeInitialBalance() {
        Customer invalidCustomer = new Customer("Invalid User", 98765, -100.0); // Negative initial balance
        assertEquals(0.0, invalidCustomer.displayBalance(), 0.001);
    }
}
