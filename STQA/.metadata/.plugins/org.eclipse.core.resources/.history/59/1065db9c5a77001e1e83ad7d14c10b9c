package stqa;

import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class FunctionalityTesting {
    private Account account;

    private Customer customer;

    @BeforeEach
    void setUp() {
        customer = new Customer("John Doe", 12345, 1000.0);
    }
    
    
    @Test
    void testCreateNewAccount() {
        Customer newCustomer = new Customer("Alice Smith", 54321, 2000.0);
        boolean namePassed = "Alice Smith".equals(newCustomer.getName());
        boolean accountNumberPassed = 54321 == newCustomer.getAccountNumber();
        boolean balancePassed = 2000.0 == newCustomer.getBalance();

        if (namePassed && accountNumberPassed && balancePassed) {
            System.out.println("Account created Successfully!!");
        } else {
            System.out.println("Account Not created!!!");
            if (!namePassed) {
                System.out.println("Name assertion failed.");
            }
            if (!accountNumberPassed) {
                System.out.println("Account number assertion failed.");
            }
            if (!balancePassed) {
                System.out.println("Balance assertion failed.");
            }
        }
        assertTrue(namePassed && accountNumberPassed && balancePassed);
    }



    @Test
    void testValidDeposit() {
        customer.deposit(500.0);
        boolean testPassed = customer.getBalance() == 1500.0;

        if (testPassed) {
            System.out.println("Money get deposited!!!");
        } else {
            System.out.println("Money not deposited!!!");
        }

        assertTrue(testPassed);
    }


    

    @Test
    void testValidWithdrawal() {
        customer.withdraw(500.0);
        assertTrue(customer.getBalance() == 500.0);
    }

    
    @Test
    void ValidNameCustomer() {
        Customer emptyNameCustomer = new Customer("Kalpesh", 99999, 500.0);
        assertTrue(emptyNameCustomer.getName().isEmpty());
    }
    
//    @Test
//    void ValidDisplayBalance() {
//        Customer
//        assertTrue(emptyNameCustomer.getName().isEmpty());
//    }
    

    
}
